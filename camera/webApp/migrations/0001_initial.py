# Generated by Django 4.2.6 on 2023-11-04 12:04

import ckeditor_uploader.fields
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_currentuser.db.models.fields
import django_currentuser.middleware
import webApp.managers
import webApp.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Camera',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region_name', models.CharField(max_length=50, null=True)),
                ('city_name', models.CharField(max_length=50, null=True)),
                ('latitude', models.CharField(max_length=20, null=True)),
                ('longitude', models.CharField(max_length=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Proccess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('D20', models.CharField(max_length=20, null=True)),
                ('D40', models.CharField(max_length=20, null=True)),
                ('D50', models.CharField(max_length=20, null=True)),
                ('D80', models.CharField(max_length=20, null=True)),
                ('start_date', models.DateTimeField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('user_id', models.CharField(blank=True, max_length=30, null=True, unique=True, verbose_name='شناسه پرسنل')),
                ('username', models.CharField(blank=True, max_length=30, null=True, unique=True, verbose_name='نام کاربری')),
                ('fullname', models.CharField(max_length=30, verbose_name='نام و نام خانوادگی')),
                ('description', ckeditor_uploader.fields.RichTextUploadingField(blank=True, null=True, verbose_name='توضیحات')),
                ('mobile', models.CharField(blank=True, max_length=11, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '09111111111'.", regex='^\\+?1?\\d{9,15}$')], verbose_name='شماره همراه')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('is_active', models.BooleanField(default=True, verbose_name='فعال')),
                ('is_staff', models.BooleanField(default=True, verbose_name='ابر کاربری')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to=webApp.models.avatar_path, verbose_name='عکس پروفایل')),
                ('is_csf_manager', models.BooleanField(default=False, verbose_name='مدیراجرایی خوشه')),
                ('created_by', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='ایجاد شده توسط')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'managed': True,
            },
            managers=[
                ('objects', webApp.managers.UserManager()),
            ],
        ),
    ]
